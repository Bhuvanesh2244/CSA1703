import itertools

# Function to calculate the total distance of a tour
def calculate_total_distance(tour, distance_matrix):
    total_distance = 0
    for i in range(len(tour) - 1):
        total_distance += distance_matrix[tour[i]][tour[i + 1]]
    total_distance += distance_matrix[tour[-1]][tour[0]]  # Return to the starting city
    return total_distance

# Function to solve TSP using brute-force
def tsp_bruteforce(distance_matrix):
    num_cities = len(distance_matrix)
    cities = list(range(num_cities))
    shortest_tour = None
    shortest_distance = float('inf')

    for tour in itertools.permutations(cities):
        total_distance = calculate_total_distance(tour, distance_matrix)
        if total_distance < shortest_distance:
            shortest_distance = total_distance
            shortest_tour = tour

    return shortest_tour, shortest_distance

# Example usage
if __name__ == "__main__":
    # Define the distance matrix between cities (replace with your own data)
    distance_matrix = [
        [0, 29, 20, 21],
        [29, 0, 15, 17],
        [20, 15, 0, 28],
        [21, 17, 28, 0]
    ]

    shortest_tour, shortest_distance = tsp_bruteforce(distance_matrix)
    print("Shortest Tour:", shortest_tour)
    print("Shortest Distance:", shortest_distance)
